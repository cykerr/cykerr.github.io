<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器学习手写笔记</title>
      <link href="/posts/b58226d9/"/>
      <url>/posts/b58226d9/</url>
      
        <content type="html"><![CDATA[<h2 id="手推笔记持续更新"><a class="markdownIt-Anchor" href="#手推笔记持续更新"></a> 手推笔记（持续更新…）</h2><p><strong>若发现错误之处，欢迎留言指正</strong></p><p>参考：</p><ol><li>机器学习 - 周志华</li><li>统计学习方法 - 李航</li><li>DeepLearning - Ian Goodfellow等</li><li>浙江大学机器学习系列课程</li></ol><p><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-1.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-2.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-3.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-4.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-5.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-6.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-7.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-8.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-9.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-10.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-11.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-12.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-13.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-14.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-15.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-16.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-17.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-18.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-19.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-20.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-21.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-22.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-23.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-24.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-25.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-26.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-27.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-28.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-29.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-30.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-31.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-32.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-33.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-34.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-35.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-36.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-37.jpg"><br /><img src="/img/loading.gif" alt="" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-38.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天一个linux命令</title>
      <link href="/posts/71ccf336/"/>
      <url>/posts/71ccf336/</url>
      
        <content type="html"><![CDATA[<h2 id="ls-命令"><a class="markdownIt-Anchor" href="#ls-命令"></a> ls 命令</h2><p>就是 list 的缩写，通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权限(包括目录、文件夹、文件权限)、查看目录信息等等。</p><p><strong>1. 常用参数搭配</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ls -a 列出目录所有文件，包含以.开始的隐藏文件</span><br><span class="line">ls -A 列出除.及..的其它文件</span><br><span class="line">ls -r 反序排列</span><br><span class="line">ls -t 以文件修改时间排序</span><br><span class="line">ls -S 以文件大小排序</span><br><span class="line">ls -h 以易读大小显示</span><br><span class="line">ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</span><br></pre></td></tr></table></figure><p><strong>2. 实例</strong></p><p>(1) 按易读方式按时间反序排序，并显示文件详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lhrt</span><br></pre></td></tr></table></figure><p>(2) 按大小反序显示文件详细信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lrS</span><br></pre></td></tr></table></figure><p>(3)列出当前目录中所有以&quot;t&quot;开头的目录的详细内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l t*</span><br></pre></td></tr></table></figure><p>(4) 列出文件绝对路径（不包含隐藏文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | sed &quot;s:^:&#96;pwd&#96;&#x2F;:&quot;</span><br></pre></td></tr></table></figure><p>(5) 列出文件绝对路径（包含隐藏文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find $pwd -maxdepth 1 | xargs ls -ld</span><br></pre></td></tr></table></figure><h2 id="cd-命令"><a class="markdownIt-Anchor" href="#cd-命令"></a> cd 命令</h2><p>cd(changeDirectory) 命令语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd [目录名]</span><br></pre></td></tr></table></figure><p>说明：切换当前目录至 dirName。</p><p><strong>1. 实例</strong></p><p>（1）进入根目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd &#x2F;</span><br></pre></td></tr></table></figure><p>（2）进入 “home” 目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br></pre></td></tr></table></figure><p>（3）进入上一次工作路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd -</span><br></pre></td></tr></table></figure><p>（4）把上个命令的参数作为cd参数使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd !$</span><br></pre></td></tr></table></figure><h2 id="pwd-命令"><a class="markdownIt-Anchor" href="#pwd-命令"></a> pwd 命令</h2><p>pwd 命令用于查看当前工作目录路径。</p><p><strong>1. 实例</strong></p><p>（1）查看当前路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br></pre></td></tr></table></figure><p>（2）查看软链接的实际路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pwd -P</span><br></pre></td></tr></table></figure><h2 id="mkdir-命令"><a class="markdownIt-Anchor" href="#mkdir-命令"></a> mkdir 命令</h2><p>mkdir 命令用于创建文件夹。</p><p>可用选项：</p><ul><li><strong>-m</strong>: 对新建目录设置存取权限，也可以用 chmod 命令设置;</li><li><strong>-p</strong>: 可以是一个路径名称。此时若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录。</li></ul><p><strong>1. 实例</strong></p><p>（1）当前工作目录下创建名为 t的文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir t</span><br></pre></td></tr></table></figure><p>（2）在 tmp 目录下创建路径为 test/t1/t 的目录，若不存在，则创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;tmp&#x2F;test&#x2F;t1&#x2F;t</span><br></pre></td></tr></table></figure><h2 id="rm-命令"><a class="markdownIt-Anchor" href="#rm-命令"></a> rm 命令</h2><p>删除一个目录中的一个或多个文件或目录，如果没有使用 -r 选项，则 rm 不会删除目录。如果使用 rm 来删除文件，通常仍可以将该文件恢复原状。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm [选项] 文件…</span><br></pre></td></tr></table></figure><p><strong>1. 实例</strong></p><p>（1）删除任何 .log 文件，删除前逐一询问确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -i *.log</span><br></pre></td></tr></table></figure><p>（2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf test</span><br></pre></td></tr></table></figure><p>（3）删除以 -f 开头的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -- -f*</span><br></pre></td></tr></table></figure><h2 id="rmdir-命令"><a class="markdownIt-Anchor" href="#rmdir-命令"></a> rmdir 命令</h2><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限。</p><p><strong>注意</strong>：不能删除非空目录</p><p><strong>1. 实例</strong></p><p>（1）当 parent 子目录被删除后使它也成为空目录的话，则顺便一并删除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rmdir -p parent&#x2F;child&#x2F;child11</span><br></pre></td></tr></table></figure><h2 id="mv-命令"><a class="markdownIt-Anchor" href="#mv-命令"></a> mv 命令</h2><p>移动文件或修改文件名，根据第二参数类型（如目录，则移动文件；如为文件则重命令该文件）。</p><p>当第二个参数为目录时，第一个参数可以是多个以空格分隔的文件或目录，然后移动第一个参数指定的多个文件到第二个参数指定的目录中。</p><p><strong>1. 实例</strong></p><p>（1）将文件 test.log 重命名为 test1.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv test.log test1.txt</span><br></pre></td></tr></table></figure><p>（2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv llog1.txt log2.txt log3.txt &#x2F;test3</span><br></pre></td></tr></table></figure><p>（3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv -i log1.txt log2.txt</span><br></pre></td></tr></table></figure><p>（4）移动当前文件夹下的所有文件到上一级目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv * ..&#x2F;</span><br></pre></td></tr></table></figure><h2 id="cp-命令"><a class="markdownIt-Anchor" href="#cp-命令"></a> cp 命令</h2><p>将源文件复制至目标文件，或将多个源文件复制至目标目录。</p><p>注意：命令行复制，如果目标文件已经存在会提示是否覆盖，而在 shell 脚本中，如果不加 -i 参数，则不会提示，而是直接覆盖！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-i 提示</span><br><span class="line">-r 复制目录及目录内所有项目</span><br><span class="line">-a 复制的文件与原文件时间一样</span><br></pre></td></tr></table></figure><p><strong>1. 实例</strong></p><p>（1）复制 a.txt 到 test 目录下，保持原文件时间，如果原文件存在提示是否覆盖。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -ai a.txt test</span><br></pre></td></tr></table></figure><p>（2）为 a.txt 建议一个链接（快捷方式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -s a.txt link_a.txt</span><br></pre></td></tr></table></figure><h2 id="cat-命令"><a class="markdownIt-Anchor" href="#cat-命令"></a> cat 命令</h2><p><strong>1. cat 三大功能</strong></p><p>（1）一次显示整个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat filename</span><br></pre></td></tr></table></figure><p>（2）从键盘创建一个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; filename</span><br></pre></td></tr></table></figure><p>只能创建新文件，不能编辑已有文件。</p><p>（3）将几个文件合并为一个文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat file1 file2 &gt; file</span><br></pre></td></tr></table></figure><ul><li>-b 对非空输出行号</li><li>-n 输出所有行号</li></ul><p><strong>2. 实例</strong></p><p>（1）把 log2012.log 的文件内容加上行号后输入 log2013.log 这个文件里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -n log2012.log log2013.log</span><br></pre></td></tr></table></figure><p>（2）把 log2012.log 和 log2013.log 的文件内容加上行号（空白行不加）之后将内容附加到 log.log 里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat -b log2012.log log2013.log log.log</span><br></pre></td></tr></table></figure><p>（3）使用 here doc 生成新文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;log.txt &lt;&lt;EOF</span><br><span class="line">&gt;Hello</span><br><span class="line">&gt;World</span><br><span class="line">&gt;PWD&#x3D;$(pwd)</span><br><span class="line">&gt;EOF</span><br><span class="line">ls -l log.txt</span><br><span class="line">cat log.txt</span><br><span class="line">Hello</span><br><span class="line">World</span><br><span class="line">PWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</span><br></pre></td></tr></table></figure><p>（4）反向列示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tac log.txt</span><br><span class="line">PWD&#x3D;&#x2F;opt&#x2F;soft&#x2F;test</span><br><span class="line">World</span><br><span class="line">Hello</span><br></pre></td></tr></table></figure><h2 id="more-命令"><a class="markdownIt-Anchor" href="#more-命令"></a> more 命令</h2><p>功能类似于 cat, more 会以一页一页的显示方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示。</p><p><strong>1. 命令参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+n      从笫 n 行开始显示</span><br><span class="line">-n       定义屏幕大小为n行</span><br><span class="line">+&#x2F;pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 </span><br><span class="line">-c       从顶部清屏，然后显示</span><br><span class="line">-d       提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能</span><br><span class="line">-l        忽略Ctrl+l（换页）字符</span><br><span class="line">-p       通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似</span><br><span class="line">-s       把连续的多个空行显示为一行</span><br><span class="line">-u       把文件内容中的下画线去掉</span><br></pre></td></tr></table></figure><p><strong>2. 常用操作命令</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Enter    向下 n 行，需要定义。默认为 1 行</span><br><span class="line">Ctrl+F   向下滚动一屏</span><br><span class="line">空格键  向下滚动一屏</span><br><span class="line">Ctrl+B  返回上一屏</span><br><span class="line">&#x3D;       输出当前行的行号</span><br><span class="line">:f     输出文件名和当前行的行号</span><br><span class="line">V      调用vi编辑器</span><br><span class="line">!命令   调用Shell，并执行命令</span><br><span class="line">q       退出more</span><br></pre></td></tr></table></figure><p><strong>3. 实例</strong></p><p>（1）显示文件中从第3行起的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">more +3 text.txt</span><br></pre></td></tr></table></figure><p>（2）在所列出文件目录详细信息，借助管道使每次显示 5 行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l | more -5</span><br></pre></td></tr></table></figure><p>按空格显示下 5 行。</p><h2 id="less-命令"><a class="markdownIt-Anchor" href="#less-命令"></a> less 命令</h2><p>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><p><strong>1. 常用命令参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-i  忽略搜索时的大小写</span><br><span class="line">-N  显示每行的行号</span><br><span class="line">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class="line">-s  显示连续空行为一行</span><br><span class="line">&#x2F;字符串：向下搜索“字符串”的功能</span><br><span class="line">?字符串：向上搜索“字符串”的功能</span><br><span class="line">n：重复前一个搜索（与 &#x2F; 或 ? 有关）</span><br><span class="line">N：反向重复前一个搜索（与 &#x2F; 或 ? 有关）</span><br><span class="line">-x &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class="line">b  向后翻一页</span><br><span class="line">d  向后翻半页</span><br><span class="line">h  显示帮助界面</span><br><span class="line">Q  退出less 命令</span><br><span class="line">u  向前滚动半页</span><br><span class="line">y  向前滚动一行</span><br><span class="line">空格键 滚动一行</span><br><span class="line">回车键 滚动一页</span><br><span class="line">[pagedown]： 向下翻动一页</span><br><span class="line">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure><p><strong>2. 实例</strong></p><p>（1）ps 查看进程信息并通过 less 分页显示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux | less -N</span><br></pre></td></tr></table></figure><p>（2）查看多个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less 1.log 2.log</span><br></pre></td></tr></table></figure><p>可以使用 n 查看下一个，使用 p 查看前一个。</p><h2 id="head-命令"><a class="markdownIt-Anchor" href="#head-命令"></a> head 命令</h2><p>head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。</p><p><strong>1. 常用参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-n&lt;行数&gt; 显示的行数（行数为负数表示从最后向前数）</span><br></pre></td></tr></table></figure><p><strong>2. 实例</strong></p><p>（1）显示 1.log 文件中前 20 行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head 1.log -n 20</span><br></pre></td></tr></table></figure><p>（2）显示 1.log 文件前 20 字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">head -c 20 log2014.log</span><br></pre></td></tr></table></figure><h2 id="tail-命令"><a class="markdownIt-Anchor" href="#tail-命令"></a> tail 命令</h2><p>用于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。</p><p><strong>1. 常用参数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-f 循环读取（常用于查看递增的日志文件）</span><br><span class="line">-n&lt;行数&gt; 显示行数（从后向前）</span><br></pre></td></tr></table></figure><p>（1）循环读取逐渐增加的文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping 127.0.0.1 &gt; ping.log &amp;</span><br></pre></td></tr></table></figure><p>后台运行：可使用 jobs -l 查看，也可使用 fg 将其移到前台运行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f ping.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制中1的个数与补码的一些思考</title>
      <link href="/posts/f7031528/"/>
      <url>/posts/f7031528/</url>
      
        <content type="html"><![CDATA[<h1 id="由一道二进制题目引发的思考"><a class="markdownIt-Anchor" href="#由一道二进制题目引发的思考"></a> 由一道二进制题目引发的思考</h1><h2 id="题干"><a class="markdownIt-Anchor" href="#题干"></a> 题干</h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><h3 id="解法一-逐位判断"><a class="markdownIt-Anchor" href="#解法一-逐位判断"></a> 解法一： 逐位判断</h3><p>逐位判断，这种方式避免了可能出现的死循环，通过 1 &lt;&lt;  i (i从1到31)，逐位和 n 与运算，若该位置有 1 返回 pow(2,i)，否则返回0，只需要统计不为 0 的次数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">思路一： 逐位判断</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="comment"># i从1开始左移去找n的二进制表示中对应位置是不是1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> n &amp; (<span class="number">1</span> &lt;&lt; i):</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> count</span><br><span class="line">        </span><br><span class="line">  <span class="comment">#（另一种逐位判断方式）n往右移位找1（若不执行下面if操作，对负数会陷入死循环）</span></span><br><span class="line">  <span class="comment"># if n &lt; 0:</span></span><br><span class="line">  <span class="comment">#     n &amp;= 0xffffffff</span></span><br><span class="line">  <span class="comment"># while n:</span></span><br><span class="line">  <span class="comment">#     if n &amp; 1:</span></span><br><span class="line">  <span class="comment">#         count += 1</span></span><br><span class="line">  <span class="comment">#     n &gt;&gt;= 1</span></span><br></pre></td></tr></table></figure><h3 id="解法二-巧用nn-1"><a class="markdownIt-Anchor" href="#解法二-巧用nn-1"></a> 解法二： 巧用n&amp;(n-1)</h3><p>基于一个事实：</p><p>n-1 会向首个有 1 高位借 1 ，该位变成 0，其右边全部变成 1。那么 n &amp; (n-1) 将会使从右往左数的首个 1 变成 0，且该位置左边保持不变，而右边全为0，从而数字 n 的二进制表示中含有几个 1，n &amp; (n-1)的操作便可以执行多少次。另外 n &amp; (n-1) == 0 可以判断 n 是否为 2的 n次幂或者 0（<a href="#n-amp-n-1-0-的含义">参考后文解释</a>）</p><img src="/img/loading.gif" alt="巧用n&amp;(n-1)" style="zoom: 50%;" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/20200402173014.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">思路二： 巧用 n&amp;(n-1)</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self, n)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1000 0000 0000 0000 0000 0100 1101 0010 -1234的原码</span></span><br><span class="line">    <span class="comment"># 1111 1111 1111 1111 1111 1011 0010 1110 -1234的补码</span></span><br><span class="line">    <span class="comment"># 1111 1111 1111 1111 1111 1111 1111 1111 补码 0xffffffff (-1)</span></span><br><span class="line">    <span class="comment"># =============================================</span></span><br><span class="line">    <span class="comment"># 因为在python中 bin(-1234)= -0b10011010010，得到的是 1234 的原码加上一个负号</span></span><br><span class="line">    <span class="comment"># -1234 &amp; 0xffffffff 时会使用 -1234 的补码参与位运算，运算结果是一个十六进制数，但在计算机中存放的是其二进制补码</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">0</span>:</span><br><span class="line">        n = n &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            n &amp;= n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><hr /><h2 id="思考"><a class="markdownIt-Anchor" href="#思考"></a> 思考</h2><h3 id="为什么移位运算和运算会陷入死循环"><a class="markdownIt-Anchor" href="#为什么移位运算和运算会陷入死循环"></a> 为什么移位运算和&amp;运算会陷入死循环</h3><ol><li>python的整型没有32位限制，当超过32位后会自动转为长整型，而不是截断高位后变为数字0的二进制表示</li><li>python中负数的存储形式和c++/java不同，存的是负号+正数的原码（正数原码=补码）</li></ol><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = bin(<span class="number">-3</span>)</span><br><span class="line">print(<span class="string">"bin(-3) &gt;&gt;&gt;"</span>, a)</span><br><span class="line"></span><br><span class="line">b = bin(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"bin(3) &gt;&gt;&gt;"</span>, b)</span><br><span class="line"></span><br><span class="line">c = <span class="number">-3</span> &amp; <span class="number">0xffffffff</span></span><br><span class="line">print(<span class="string">"-3 &amp; 0xffffffff &gt;&gt;&gt;"</span>, c) <span class="comment"># 运算结果是 -3 补码的十六进制数</span></span><br><span class="line"></span><br><span class="line">d = bin(<span class="number">-3</span> &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">print(<span class="string">"bin(-3 &amp; 0xffffffff) &gt;&gt;&gt;"</span>, d)</span><br><span class="line"></span><br><span class="line">e = bin(<span class="number">0xfffffffd</span>)</span><br><span class="line">print(<span class="string">"bin(0xfffffffd) &gt;&gt;&gt;"</span>, e)</span><br><span class="line"></span><br><span class="line">//输出</span><br><span class="line">//bin(<span class="number">-3</span>) &gt;&gt;&gt; <span class="number">-0</span>b11</span><br><span class="line">//bin(<span class="number">3</span>) &gt;&gt;&gt; <span class="number">0b11</span></span><br><span class="line">//<span class="number">-3</span> &amp; <span class="number">0xffffffff</span> &gt;&gt;&gt; <span class="number">4294967293</span></span><br><span class="line">//bin(<span class="number">-3</span> &amp; <span class="number">0xffffffff</span>) &gt;&gt;&gt; <span class="number">0b11111111111111111111111111111101</span></span><br><span class="line">//     bin(<span class="number">0xfffffffd</span>) &gt;&gt;&gt; <span class="number">0b11111111111111111111111111111101</span></span><br></pre></td></tr></table></figure><p>可以看出：</p><ol><li><strong>Python中的整型是补码形式存储的</strong></li><li><strong>Python中<code>bin</code>一个负数（十进制表示），输出的是它的原码的二进制表示加上个负号</strong></li><li><strong>一个负数（十进制表示）&amp; 0xffffffff，输出的是这个负数补码的十六进制表示</strong></li><li><strong>Python中<code>bin</code>一个负数（十六进制表示），输出的是对应的二进制表示（补码），<font color='red'>相当于去掉了负号，Python认为它是一个正数，在位运算时最高位不会补1！</font></strong></li></ol><p>这就导致<strong>十进制负数</strong>在<code>移位运算</code>或 <code>&amp;运算</code>的时候，陷入死循环</p><p>对于<code>移位运算</code>：</p><p>当输入数据n为负数时，每次右移都要向最高位补1，最终陷入0xffffffff死循环。</p><p>对于<code>&amp;运算</code>：</p><p><code>n&amp;(n-1)</code>操作不断消去右边的1，当其补码为 <code>1[31个0]</code>，n-1的补码为<code>0[31个1]</code>，<code>n&amp;(n-1)</code>产生<code>[32个0]</code>，本应结束循环。但n是一个负数，<code>&amp;</code>操作后会在<code>32个0</code>前补一个1，又python整数可以超过32位，不会发生截断，变成<code>1[32个0]</code>这样一个33位整数。并且随着<code>n&amp;(n-1)</code>的操作每次都在溢出位补1，又变成<code>pow(2, 34)</code>、<code>pow(2, 35)</code>…，变成一个越来越大的数字，陷入<code>while n:</code>死循环。</p><p><strong>补充一句</strong>：对于输入的非十进制的数，就是它的补码，计算机是不用再进行补码转换的，直接存入内存。</p><h3 id="nn-1-0-的含义"><a class="markdownIt-Anchor" href="#nn-1-0-的含义"></a> n&amp;(n-1) == 0 的含义</h3><p>假设 n = 5，二进制表示为101，那么 n-1 = 4，二进制表示为100， 5 &amp; 4 = 101 &amp; 100 = 100 = 4 ！= 0，来看更多的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">5 &amp; 4 &#x3D; 101 &amp; 100 &#x3D; 4</span><br><span class="line">6 &amp; 5 &#x3D; 110 &amp; 101 &#x3D; 4</span><br><span class="line">7 &amp; 6 &#x3D; 111 &amp; 110 &#x3D; 6</span><br><span class="line">8 &amp; 7 &#x3D; 1000 &amp; 0111 &#x3D; 0</span><br></pre></td></tr></table></figure><p>我们会发现要使表达式等于0，需满足下面条件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x + 1 &#x3D; n</span><br><span class="line">x &amp; n &#x3D; 0</span><br></pre></td></tr></table></figure><p>我们来看看有那些数能满足要求：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">10 &amp; 01 &#x3D; 0   -------2^1</span><br><span class="line">100 &amp; 011 &#x3D; 0  -------2^2</span><br><span class="line">1000 &amp; 0111 &#x3D; 0  -------2^3</span><br><span class="line">10000 &amp; 01111 &#x3D; 0  -------2^4</span><br><span class="line">。。。。。。</span><br></pre></td></tr></table></figure><p>所以<code>((n &amp; (n-1)) == 0</code> 的含义是n满足2的n次方，n的最高有效位为1，其余位为0。（或n=0）</p>]]></content>
      
      
      <categories>
          
          <category> 刷题记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进制数 </tag>
            
            <tag> 原反补码 </tag>
            
            <tag> 踩坑记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码、补码详解</title>
      <link href="/posts/cfbbb02f/"/>
      <url>/posts/cfbbb02f/</url>
      
        <content type="html"><![CDATA[<h2 id="机器数和真值"><a class="markdownIt-Anchor" href="#机器数和真值"></a> 机器数和真值</h2><p>在学习原码, 反码和补码之前, 需要先了解机器数和真值的概念。</p><h3 id="机器数"><a class="markdownIt-Anchor" href="#机器数"></a> 机器数</h3><p>一个数在计算机中的二进制表示形式, 叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号, 正数为0, 负数为1.</p><p>比如，十进制中的数 +3 ，计算机字长为8位，转换成二进制就是00000011。如果是 -3 ，就是 10000011 。</p><p>那么，这里的 00000011 和 10000011 就是机器数。</p><h3 id="真值"><a class="markdownIt-Anchor" href="#真值"></a> 真值</h3><blockquote><p>因为第一位是符号位，所以机器数的形式值就不等于真正的数值。例如上面的有符号数 10000011，其最高位1代表负，其真正数值是 -3 而不是形式值131（10000011转换成十进制等于131）。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。</p></blockquote><p>例：0000 0001的真值 = +000 0001 = +1，1000 0001的真值 = –000 0001 = –1</p><h2 id="原码-反码-补码的基础概念和计算方法"><a class="markdownIt-Anchor" href="#原码-反码-补码的基础概念和计算方法"></a> 原码, 反码, 补码的基础概念和计算方法.</h2><p>在探求为何机器要使用补码之前, 让我们先了解原码, 反码和补码的概念.对于一个数, 计算机要使用一定的编码方式进行存储. 原码, 反码, 补码是机器存储一个具体数字的编码方式.</p><h3 id="原码"><a class="markdownIt-Anchor" href="#原码"></a> 原码</h3><p>原码就是符号位加上真值的绝对值, 即用第一位表示符号, 其余位表示值. 比如如果是8位二进制:</p><blockquote><p>[+1]<sub>原</sub> = 0000 0001</p><p>[-1]<sub>原</sub> = 1000 0001</p></blockquote><p>第一位是符号位. 因为第一位是符号位, 所以8位二进制数的取值范围就是:</p><blockquote><p>[1111 1111 , 0111 1111]</p></blockquote><p>即</p><blockquote><p>[-127 , 127]</p></blockquote><p>原码是人脑最容易理解和计算的表示方式.</p><h3 id="反码"><a class="markdownIt-Anchor" href="#反码"></a> 反码</h3><p>反码的表示方法是:</p><p>正数的反码是其本身</p><p>负数的反码是在其原码的基础上, 符号位不变，其余各个位取反.</p><blockquote><p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub></p><p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub></p></blockquote><p>可见如果一个反码表示的是负数, 人脑无法直观的看出来它的数值. 通常要将其转换成原码再计算.</p><h3 id="补码"><a class="markdownIt-Anchor" href="#补码"></a> 补码</h3><p>补码的表示方法是:</p><p>正数的补码就是其本身</p><p>负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)</p><blockquote><p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p><p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p></blockquote><p>对于负数, 补码表示方式也是人脑无法直观看出其数值的. 通常也需要转换成原码在计算其数值.</p><h2 id="为何要使用原码-反码和补码"><a class="markdownIt-Anchor" href="#为何要使用原码-反码和补码"></a> 为何要使用原码, 反码和补码</h2><p>在开始深入学习前, 我的学习建议是先&quot;死记硬背&quot;上面的原码, 反码和补码的表示方式以及计算方法.</p><p>现在我们知道了计算机可以有三种编码方式表示一个数. 对于正数因为三种编码方式的结果都相同:</p><blockquote><p>[+1] = [00000001]<sub>原</sub> = [00000001]<sub>反</sub> = [00000001]<sub>补</sub></p></blockquote><p>所以不需要过多解释. 但是对于负数:</p><blockquote><p>[-1] = [10000001]<sub>原</sub> = [11111110]<sub>反</sub> = [11111111]<sub>补</sub></p></blockquote><p>可见原码, 反码和补码是完全不同的. 既然原码才是被人脑直接识别并用于计算表示方式, 为何还会有反码和补码呢?</p><p>首先, 因为人脑可以知道第一位是符号位, 在计算的时候我们会根据符号位, 选择对真值区域的加减. (真值的概念在本文最开头). 但是对于计算机, 加减乘数已经是最基础的运算, 要设计的尽量简单. 计算机辨别&quot;符号位&quot;显然会让计算机的基础电路设计变得十分复杂! 于是人们想出了将符号位也参与运算的方法. 我们知道, 根据运算法则减去一个正数等于加上一个负数, 即: 1-1 = 1 + (-1) = 0 , 所以机器可以只有加法而没有减法, 这样计算机运算的设计就更简单了.</p><p>于是人们开始探索 将符号位参与运算, 并且只保留加法的方法. 首先来看原码:</p><p>计算十进制的表达式: 1-1=0</p><blockquote><p>1 - 1 = 1 + (-1) = [00000001]<sub>原</sub> + [10000001]<sub>原</sub> = [10000010]<sub>原</sub> = -2</p></blockquote><p>如果用原码表示, 让符号位也参与计算, 显然对于减法来说, 结果是不正确的.这也就是为何计算机内部不使用原码表示一个数.</p><h3 id="为了解决原码做减法的问题-出现了反码"><a class="markdownIt-Anchor" href="#为了解决原码做减法的问题-出现了反码"></a> 为了解决原码做减法的问题, 出现了反码</h3><p>计算十进制的表达式: 1-1=0</p><blockquote><p>1 - 1 = 1 + (-1) = [0000 0001]<sub>原</sub> + [1000 0001]<sub>原</sub> = [0000 0001]<sub>反</sub> + [1111 1110]<sub>反</sub> = [1111 1111]<sub>反</sub> = [1000 0000]<sub>原</sub> = -0</p></blockquote><p>发现用反码计算减法, 结果的真值部分是正确的. 而唯一的问题其实就出现在&quot;0&quot;这个特殊的数值上. 虽然人们理解上+0和-0是一样的, 但是0带符号是没有任何意义的. 而且会有[0000 0000]<sub>原</sub>和[1000 0000]<sub>原</sub>两个编码表示0.</p><h3 id="补码的出现-解决了0的符号以及两个编码的问题"><a class="markdownIt-Anchor" href="#补码的出现-解决了0的符号以及两个编码的问题"></a> 补码的出现, 解决了0的符号以及两个编码的问题</h3><blockquote><p>1-1 = 1 + (-1) = [0000 0001]<sub>原</sub> + [1000 0001]<sub>原</sub> = [0000 0001]<sub>补</sub> + [1111 1111]<sub>补</sub> = [0000 0000]<sub>补</sub>=[0000 0000]<sub>原</sub></p></blockquote><p>这样0用[0000 0000]表示, 而以前出现问题的-0则不存在了.而且可以用[1000 0000]表示-128:</p><blockquote><p>(-1) + (-127) = [1000 0001]<sub>原</sub> + [1111 1111]<sub>原</sub> = [1111 1111]<sub>补</sub> + [1000 0001]<sub>补</sub> = [1000 0000]<sub>补</sub></p></blockquote><p>-1-127的结果应该是-128, 在用补码运算的结果中, [1000 0000]补 就是-128. 但是注意因为实际上是使用以前的-0的补码来表示-128, 所以-128并没有原码和反码表示.(对-128的补码表示[1000 0000]补算出来的原码是[0000 0000]<sub>原</sub>, 这是不正确的)</p><h3 id="补码还能多表示一个最低数"><a class="markdownIt-Anchor" href="#补码还能多表示一个最低数"></a> 补码还能多表示一个最低数</h3><p>使用补码, 不仅仅修复了0的符号以及存在两个编码的问题, 而且还能够多表示一个最低数. 这就是为什么8位二进制, 使用原码或反码表示的范围为[-127, +127], 而使用补码表示的范围为[-128, 127].</p><p>因为机器使用补码, 所以对于编程中常用到的32位int类型, 可以表示范围是: [-231, 231-1] 因为第一位表示的是符号位.而使用补码表示时又可以多保存一个最小值.</p><h2 id="原码-反码-补码-再深入"><a class="markdownIt-Anchor" href="#原码-反码-补码-再深入"></a> 原码, 反码, 补码 再深入</h2><p>计算机巧妙地把符号位参与运算, 并且将减法变成了加法, 背后蕴含了怎样的数学原理呢?</p><p>将钟表想象成是一个1位的12进制数. 如果当前时间是6点, 我希望将时间设置成4点, 需要怎么做呢?我们可以:</p><blockquote><p>\1. 往回拨2个小时: 6 - 2 = 4</p><p>\2. 往前拨10个小时: (6 + 10) mod 12 = 4</p><p>\3. 往前拨10+12=22个小时: (6+22) mod 12 =4</p></blockquote><p>2,3方法中的mod是指取模操作, 16 mod 12 =4 即用16除以12后的余数是4.</p><p>所以钟表往回拨(减法)的结果可以用往前拨(加法)替代!</p><p>现在的焦点就落在了如何用一个正数, 来替代一个负数. 上面的例子我们能感觉出来一些端倪, 发现一些规律. 但是数学是严谨的. 不能靠感觉.</p><p>首先介绍一个数学中相关的概念: 同余</p><h3 id="同余的概念"><a class="markdownIt-Anchor" href="#同余的概念"></a> 同余的概念</h3><p>两个整数a，b，若它们除以整数m所得的余数相等，则称a，b对于模m同余</p><p>记作 a ≡ b (mod m)</p><p>读作 a 与 b 关于模 m 同余。</p><p>举例说明:</p><blockquote><p>4 mod 12 = 4</p><p>16 mod 12 = 4</p><p>28 mod 12 = 4</p></blockquote><p>所以4, 16, 28关于模 12 同余.</p><h3 id="负数取模"><a class="markdownIt-Anchor" href="#负数取模"></a> 负数取模</h3><p>正数进行mod运算是很简单的. 但是负数呢?</p><p>下面是关于mod运算的数学定义:</p><p><a href="http://images.cnblogs.com/cnblogs_com/zhangziqiu/201103/201103302155507894.jpg" target="_blank" rel="noopener"><img src="/img/loading.gif" alt="clip_image001" / class="lazyload" data-src="https://images.cnblogs.com/cnblogs_com/zhangziqiu/201103/201103302155504514.jpg"></a></p><p>上面是截图, &quot;取下界&quot;符号找不到如何输入(word中粘贴过来后乱码). 下面是使用&quot;L&quot;和&quot;J&quot;替换上图的&quot;取下界&quot;符号:</p><blockquote><p>x mod y = x - y L x / y J</p></blockquote><p>上面公式的意思是:</p><p>x mod y等于 x 减去 y 乘上 x与y的商的下界.</p><p>以 -3 mod 2 举例:</p><blockquote><p>-3 mod 2</p><p>= -3 - 2xL -3/2 J</p><p>= -3 - 2xL-1.5J</p><p>= -3 - 2x(-2)</p><p>= -3 + 4 = 1</p></blockquote><p>所以:</p><blockquote><p>(-2) mod 12 = 12-2=10</p><p>(-4) mod 12 = 12-4 = 8</p><p>(-5) mod 12 = 12 - 5 = 7</p></blockquote><h3 id="开始证明"><a class="markdownIt-Anchor" href="#开始证明"></a> 开始证明</h3><p>再回到时钟的问题上:</p><blockquote><p>回拨2小时 = 前拨10小时</p><p>回拨4小时 = 前拨8小时</p><p>回拨5小时= 前拨7小时</p></blockquote><p>注意, 这里发现的规律!</p><p>结合上面学到的同余的概念.实际上:</p><blockquote><p>(-2) mod 12 = 10</p><p>10 mod 12 = 10</p></blockquote><p>-2与10是同余的.</p><blockquote><p>(-4) mod 12 = 8</p><p>8 mod 12 = 8</p></blockquote><p>-4与8是同余的.</p><p>距离成功越来越近了. 要实现用正数替代负数, 只需要运用同余数的两个定理:</p><p>反身性:</p><blockquote><p>a ≡ a (mod m)</p></blockquote><p>这个定理是很显而易见的.</p><p>线性运算定理:</p><blockquote><p>如果a ≡ b (mod m)，c ≡ d (mod m) 那么:</p><p>(1)a ± c ≡ b ± d (mod m)</p><p>(2)a * c ≡ b * d (mod m)</p></blockquote><p>如果想看这个定理的证明, 请看:<a href="http://baike.baidu.com/view/79282.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/79282.htm</a></p><p>所以:</p><blockquote><p>7 ≡ 7 (mod 12)</p><p>(-2) ≡ 10 (mod 12)</p><p>7 -2 ≡ 7 + 10 (mod 12)</p></blockquote><p>现在我们为一个负数, 找到了它的正数同余数. 但是并不是7-2 = 7+10, 而是 7 -2 ≡ 7 + 10 (mod 12) , 即计算结果的余数相等.</p><p>接下来回到二进制的问题上, 看一下: 2-1=1的问题.</p><blockquote><p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原= [0000 0010]反 + [1111 1110]反</p></blockquote><p>先到这一步, -1的反码表示是1111 1110. 如果这里将[1111 1110]认为是原码, 则[1111 1110]原 = -126, 这里将符号位除去, 即认为是126.</p><p>发现有如下规律:</p><blockquote><p>(-1) mod 127 = 126</p><p>126 mod 127 = 126</p></blockquote><p>即:</p><blockquote><p>(-1) ≡ 126 (mod 127)</p><p>2-1 ≡ 2+126 (mod 127)</p></blockquote><p>2-1 与 2+126的余数结果是相同的! 而这个余数, 正式我们的期望的计算结果: 2-1=1</p><p>所以说一个数的反码, 实际上是这个数对于一个膜的同余数. 而这个膜并不是我们的二进制, 而是所能表示的最大值! 这就和钟表一样, 转了一圈后总能找到在可表示范围内的一个正确的数值!</p><p>而2+126很显然相当于钟表转过了一轮, 而因为符号位是参与计算的, 正好和溢出的最高位形成正确的运算结果.</p><p>既然反码可以将减法变成加法, 那么现在计算机使用的补码呢? 为什么在反码的基础上加1, 还能得到正确的结果?</p><blockquote><p>2-1=2+(-1) = [0000 0010]原 + [1000 0001]原 = [0000 0010]补 + [1111 1111]补</p></blockquote><p>如果把[1111 1111]当成原码, 去除符号位, 则:</p><blockquote><p>[0111 1111]原 = 127</p></blockquote><p>其实, 在反码的基础上+1, 只是相当于增加了膜的值:</p><blockquote><p>(-1) mod 128 = 127</p><p>127 mod 128 = 127</p><p>2-1 ≡ 2+127 (mod 128)</p></blockquote><p>此时, 表盘相当于每128个刻度转一轮. 所以用补码表示的运算结果最小值和最大值应该是[-128, 128].</p><p>但是由于0的特殊情况, 没有办法表示128, 所以补码的取值范围是[-128, 127]</p><hr /><p>作者：<a href="http://www.cnblogs.com/zhangziqiu/" target="_blank" rel="noopener">张子秋</a><br />出处：<a href="http://www.cnblogs.com/zhangziqiu/" target="_blank" rel="noopener">http://www.cnblogs.com/zhangziqiu/</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原反补码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你不够优秀，因为你不够孤独</title>
      <link href="/posts/ab5e98c4/"/>
      <url>/posts/ab5e98c4/</url>
      
        <content type="html"><![CDATA[<h1 id="节选自网络"><a class="markdownIt-Anchor" href="#节选自网络"></a> 节选自网络</h1><p>人生来孤独，因而也惧怕孤独，很少有人能够真正坦然的面对孤独。多数的人是在寻找孤独与群居之间的一种平衡。但这种平衡靠什么来掌握呢？靠心，心觉得孤独了，才想去平衡一下，但本质上还是惧怕孤独。金庸小说里的不少武林高手有不少是喜欢孤独的，也在孤独中创造了不少精湛武学。例如张三丰，闭关思考，悟出以柔克刚的太极拳与太极剑，终成一代宗师。当一个人真正孤独地面对自己，开始思考时，这个人就开始成熟了，才有了创造的可能性。</p><p>各种励志书籍都在鼓励人去交往，去建立关系，但很少有书叫人去孤独，这也是我不喜欢看励志书的原因。强调行动力本身并没有错，但是没有经过孤独思考的行动力是不是值得去学习呢？</p><p>人在社会中生存，就很难做到孤独，每天都要接触不少的人与事，哪有时间去孤独？一到夜晚，本来是面对孤独的时候，却把时间交给了电话与网络。我时常觉得电脑的产生让人越来越没有思想了，想象力更加的贫乏了。一有时间就在网上，寄希望在网上学到多少东西，但真学了多少东西呢？</p><p>每个人都希望自己优秀，但似乎每个人都不愿意去孤独。这个年代，很多人憧憬的是物质、名誉与享受，却很少去关心自己的内心需要的什么。真正优秀的人往往觉得自己是孤独的，也会认为自己的优秀来源于自己的孤独。苏东坡是孤独的，所以才有了后来的大江东去的千古名作，司马迁是孤独的，所以才有了「史家之绝唱，无韵之离骚」之称的《史记》，爱因斯坦是孤独的，所以才有了相对论。大师往往是孤独的，对他来的人生来说，可能并一定是幸事，但却是时代的幸事。上天往往就是这么公平！</p><p>看一个人优秀不优秀，我觉得其实只要看他在孤独的时候是在做什么，是手无足措，还是镇定自若？是折腾还是享受？优秀的人往往在自己的心中有那么一段或几段孤独的时光，可能并不愿意再去重复，但却愿意让那种回忆停留在记忆的某一处，不轻易说，但却是自信的根基。我自信，因为我孤独过。</p><p>走在前往优秀路上的人，往往觉得自己太孤独了，自己的优秀并没有被人所知，所以有人选择了退却，选择了随大流，其实也就选择了远离优秀，因为优秀诞生了思考，思考又常与孤独为伴。</p><p>你够优秀吗？请先问问你自己：你够孤独吗？</p>]]></content>
      
      
      <categories>
          
          <category> 杂文收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人的生活方式有两种</title>
      <link href="/posts/ea2dc6b/"/>
      <url>/posts/ea2dc6b/</url>
      
        <content type="html"><![CDATA[<h1 id="节选自俞洪敏励志演讲"><a class="markdownIt-Anchor" href="#节选自俞洪敏励志演讲"></a> 节选自俞洪敏励志演讲</h1><p>人的生活方式有两种，第一种是像草一样活着。你尽管活着，每年还在成长，但是你毕竟是一颗草；你吸收雨露阳光，但是长不大。人们可以踩过你，人们不会因为你的痛苦而产生痛苦；人们不会因为你被踩了，而来怜悯你，因为人们本身就没看到你。所以，我们每一个人都应该像树一样成长。即使我们现在什么都不是，但是只要你有树的种子，即使被人踩到泥土中间，你依然能够吸收泥土的养分，自己成长起来。也许两年、三年你长不大，但是十年、八年、二十年，你一定能长成参天大树，当你长成参天大树以后，遥远的地方，人们就能看到你；走近你，你能给人一片绿色、一片阴凉，你能帮助别人。即使人们离开你以后，回头一看，你依然是地平线上一道美丽的风景线。树，活着是美丽的风景，死了依然是栋梁之才。活着死了都有用，这就是我们每一个同学做人的标准和成长的标准。</p><p>当一个人为别人活着的时候，就非常麻烦。因为别人的标准是不一样的，没有坚持了自己的追求而想要的东西，你的尊严和自尊是得不到保证的，因为你总是在飘摇中间。对于我们来说，保持自己尊严和自尊的最好的方法是什么呢？就是说你有一个梦想，通过从最基本的一个步骤，你就可以开始追求。比如说最后你想取代我，成为新东方的董事长和总裁，你能不能做到？只要你有足够的心态和足够做事情的方法，以及胸怀，肯定是能做到的。</p><p>凡是想要一下子把一件事情干成的人，就算他干成这件事情，他也没有基础，因为等于是在沙滩上造的房子，最后一定会倒塌。只有慢慢地一步一步把事情干成的，每一步都给自己打下坚实的基础，每一步都给自己一个良好的交代，再重新向未来更高去走每一步的人，他才能够把事情真正地做成功。</p><p>当你决定了一辈子干什么以后，你就要坚定不移地干下去，就不要随便地换。你可以像一条河流一样，越流越宽阔，但是千万不要再想去变成另外一条河，或者变成一座高山。有了这样一个目标以后，你生命就不会摇晃，不会因为有某种机会，你就到处乱窜，这样你才能够做出事情。</p><p>我们未来生活的一种重要能力，叫做忍辱负重的能力。很多社会名流会遇到很多很多你不能忍受的事情，但是你不得不忍受。而你不忍受就不可能成功。为什么，因为你不忍辱负重，你就没有时间，你就没有空间，没有走向未来的空间。如果你想走向未来，最后变得更加强大、更加繁荣，你就必须要做好给自己留下足够的时间和空间。轮到我们自己的生命，要想为一个伟大的目标而奋斗的时候，你排除也得必须排除，你生命中一切琐碎的干扰，因此你就必须忍辱负重。</p><p>不管我们是什么年龄，我们哪能做一时气不过的事情。这个世界上让你气不过的事情太多了，只有你气得过的时候，这个世界才在你面前才能展开最光辉的一面。</p><p>我有这么一个比喻，每一条河流都有自己不同的生命曲线。长江和黄河的曲线，是绝对不一样的。但是每一条河流都有自己的梦想，那就是奔向大海。所以不管黄河是多么的曲折，绕过了多少的障碍；长江拐的弯不如黄河多，但是她冲破了悬崖峭壁，用的方式是不一样的，但是最后都走到了大海。当我们遇到困难时，不管是冲过去还是绕过去，只要我们能过去就行。我希望大家能使自己的生命向梦想流过去，像长江、黄河一样流到自己梦想的尽头，进入宽阔的海洋，使自己的生命变得开阔，使自己的事业变得开阔。但是并不是你想流就能流过去，其实这里面就具备了一种精神，毫无疑问就是水的精神。我们的生命有时候会是泥沙，尽管你也跟着水一起往前流，但是由于你个性的缺陷，面对困难的退步或者说胆怯，你可能慢慢地就会像泥沙一样沉淀下去，一旦你沉淀下去，也许你不用为前进而努力了，但是你却永远见不得阳光了。你沉淀了下去，上面的泥沙就会不断地把你压住，最后你会暗无天日。所以我建议大家，不管你现在的生命是什么样的，一定要有水的精神。哪怕被污染了，也能洗净自己。像水一样，不断地积蓄自己的力量，不断地冲破障碍，当你发现时机不到的时候，把自己的厚度给积累起来，当有一天时机来临的时候，你就能够奔腾入海，成就自己的生命。</p><p>渡过难关是一种心态，你想要跨过去的话，就必然能跨过去。</p><p>很多人在工作的时候，带着怨气和怨恨在工作，你的工作就远做不好。</p><p>如何能够把事情做得更成功的几个要点。第一要点，如何尽可能把自己的长期目标和短期目标结合起来。我们要先分清楚，哪些事情是我们想一辈子干的事情，哪些事情是一下子干完，我们就可以不用干的事情。中国有句话叫急事慢做，你越着急的事情，你做的越仔细、越认真，越能把事情做好。而你越着急的事情，做的越快反而越做的七零八落，我把这个急事也叫做大事。第二个要素就是要决定自己一辈子干什么。那么还有一个我觉得非常重要的，就是平时做事情的时候，对时间的计划性。还有一点，就是成功要自我约束。任何时候，当你前面面临一个巨大的诱惑，和其它任何可能产生诱惑的时候，如果你觉得自己停不下来，你千万别去追那个东西。因为你追了那个东西停不下来，最后栽跟头的一定就是你。</p><p>千万记住一点，做任何事情的时间都是能挤出来的。</p><p>伟大与平凡的不同之处，一个平凡的人每天过着琐碎的生活，但是他把琐碎堆砌出来，还是一堆琐碎的生命。所谓伟大的人，是把一堆琐碎的事情，通过一个伟大的目标，每天积累起来以后，变成一个伟大的事业。</p><p>我的核心价值观就是，以善为生，用善良的心态来对待自己的生命和别人的生命。</p><p>有两句话我是比较欣赏的。生命是一种过程；事业一种结果。</p><p>我们每一个人是活在每一天的，假如说你每一天不高兴，你把所有的每一天都组合起来，就是你一辈子不高兴。但是假如你每一天都高兴了，其实你一辈子就是幸福快乐的。有一次我在往黄河边上走的时候，我就用矿泉水瓶灌了一瓶水。大家知道黄河水特别的浑，后来我就放在路边，大概有一个小时左右。让我非常吃惊的发现，四分之三已经变成了非常清澈的一瓶水，而只有四分之一呢，是沉淀下来的泥沙。假如说我们把这瓶水，清水部分比喻我们的幸福和快乐，而把那个浑浊的那个沉淀的泥沙，比喻我们痛苦的话，你就明白了；当你摇晃一下以后，你的生命中整个充满的是浑浊，也就是充满的都是痛苦和烦恼。但是当你把心静下来的以后，尽管泥沙总的份量一点都没有减少，但是它沉淀在你的心中，因为你的心比较沉静，所以就再也不会被搅和起来，因此你的生命的四分之三，就一定是幸福和快乐的。</p><p>人的生命道路其实很不平坦，靠你一个人是绝对走不完的，这个世界上只有你跟别人在一起，为了同一个目标一起做事情的时候，才能把这件事情做成。一个人的力量很有限，但是一群人的力量是无限的。当五个手指头伸出来的时候，它是五个手指头，但是当你把五个手指头握起来的时候，它是一个拳头。未来除了是你自己成功，一定要跟别人一起成功，跟别人团结在一起，形成我们，你才能把事情做成功。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文收录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人生感悟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模型评估</title>
      <link href="/posts/56421c6a/"/>
      <url>/posts/56421c6a/</url>
      
        <content type="html"><![CDATA[<blockquote><p>没有测量，就没有科学。</p></blockquote><h1 id="评估指标"><a class="markdownIt-Anchor" href="#评估指标"></a> 评估指标</h1>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 模型评估 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征工程</title>
      <link href="/posts/8ae97bf8/"/>
      <url>/posts/8ae97bf8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>特征工程，顾名思义，是对原始数据进行一系列工程处理，将其提炼为特征，作为输入供算法和模型使用 。 从本质上来讲，特征工程是一个表示和展现数据的过程 。 在实际工作中，特征工程旨在去除原始数据中的杂质和冗余，设计更高效的特征以刻画求解的问题与预测模型之间的关系 。</p></blockquote><h2 id="特征归一化"><a class="markdownIt-Anchor" href="#特征归一化"></a> 特征归一化</h2><p>对数值类型的特征做归一化可以将所有的特征都统一到一个大致相同的数值区间内。减小不同维度数值特征的差异性，这样可以更快地通过梯度下降找到最优解。</p><h3 id="线性函数归一化"><a class="markdownIt-Anchor" href="#线性函数归一化"></a> 线性函数归一化</h3><p>对原始数据进行线性变换，使结果映射到<code>[0, 1]</code>的范围，实现对原始数据等比缩放，公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>X</mi><mrow><mi>n</mi><mi>o</mi><mi>r</mi><mi>m</mi></mrow></msub><mo>=</mo><mfrac><mrow><mi>X</mi><mo>−</mo><msub><mi>X</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow><mrow><msub><mi>X</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><msub><mi>X</mi><mrow><mi>m</mi><mi>i</mi><mi>n</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">X_{norm}=\frac{X-X_{min}}{X_{max}-X_{min}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mord mathdefault mtight">o</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mord mathdefault mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.19633em;vertical-align:-0.8360000000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.3139999999999996em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">a</span><span class="mord mathdefault mtight">x</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07847em;">X</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8360000000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="零均值归一化"><a class="markdownIt-Anchor" href="#零均值归一化"></a> 零均值归一化</h3><p>将原始数据映射到均值为0、标准差为1的分布上，公式如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>z</mi><mo>=</mo><mfrac><mrow><mi>x</mi><mo>−</mo><mi>μ</mi></mrow><mi>σ</mi></mfrac></mrow><annotation encoding="application/x-tex">z=\frac{x-\mu}{\sigma}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">σ</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">μ</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>注: <strong>通过梯度下降法求解的模型通常是需要归一化的</strong>，包括线性回归、逻辑回归、支持向量机、神经网络等模型。</p><p><strong>但决策树模型除外</strong>，如<code>C4.5算法</code>中，决策树在进行节点分裂时主要依据<code>数据集D</code>关于<code>特征x</code>的信息增益比，而信息增益比跟特征是否经过归一化是无关的，因为归一化并不会改变样本在特征x上的信息增益。</p><h2 id="文本表示模型"><a class="markdownIt-Anchor" href="#文本表示模型"></a> 文本表示模型</h2><h3 id="词袋模型bags-of-words"><a class="markdownIt-Anchor" href="#词袋模型bags-of-words"></a> 词袋模型（Bags of Words）</h3><p>最基础的文本表示模型是词袋模型。即将每篇文章看成一袋子词，并忽略每个词出现的顺序。</p><p>具体地说，就是将整段文本以词为单位切分开，然后每篇文章可以表示成一个长向量，向量中每一维代表一个单词，而该维度对应的权重则反映了这个词在原文中的重要程度。</p><p>常用TF-IDF来计算权重，公式为：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>F</mi><mo>−</mo><mi>I</mi><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mi>T</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>×</mo><mi>I</mi><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TF-IDF(t,d)=TF(t,d)\times IDF(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">TF(t,d)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span></span></span></span>为<code>单词t</code>在<code>文档d</code>中出现的频率：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>T</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo separator="true">,</mo><mi>d</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi mathvariant="normal">单</mi><mi mathvariant="normal">词</mi><mi>t</mi><mi mathvariant="normal">数</mi><mi mathvariant="normal">量</mi></mrow><mrow><mi mathvariant="normal">文</mi><mi mathvariant="normal">档</mi><mi>d</mi><mi mathvariant="normal">总</mi><mi mathvariant="normal">词</mi><mi mathvariant="normal">数</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">TF(t,d)=\frac{单词t数量}{文档d总词数}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">T</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9780799999999998em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.29208em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">档</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">词</span><span class="mord cjk_fallback">数</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">词</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">量</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">IDF(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>是逆文档频率，衡量<code>单词t</code>对表达语义所起的重要程度：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>⁡</mo><mfrac><mrow><mi mathvariant="normal">文</mi><mi mathvariant="normal">章</mi><mi mathvariant="normal">总</mi><mi mathvariant="normal">数</mi></mrow><mrow><mi mathvariant="normal">包</mi><mi mathvariant="normal">含</mi><mi mathvariant="normal">单</mi><mi mathvariant="normal">词</mi><mi>t</mi><mi mathvariant="normal">的</mi><mi mathvariant="normal">文</mi><mi mathvariant="normal">章</mi><mi mathvariant="normal">总</mi><mi mathvariant="normal">数</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">IDF(t)=\log\frac{文章总数}{包含单词t的文章总数+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.46377em;vertical-align:-0.7693300000000001em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.677em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">包</span><span class="mord cjk_fallback">含</span><span class="mord cjk_fallback">单</span><span class="mord cjk_fallback">词</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">章</span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">数</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">章</span><span class="mord cjk_fallback">总</span><span class="mord cjk_fallback">数</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7693300000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>直观解释是，如果一个单词在非常多的文章里面都出现，那么它可能是一个比较通用的词汇，对于区分某篇文章特殊语义的贡献较小，即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>I</mi><mi>D</mi><mi>F</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">IDF(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.07847em;">I</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>趋于0，相当于对权重做了一定程度的惩罚。</p><h3 id="n-gram模型"><a class="markdownIt-Anchor" href="#n-gram模型"></a> N-gram模型</h3><p>有时，单词级划分并不合适，几个单词组合的意思可能与单独意思大相径庭。</p><p>那么可以将连续出现的n个单词（<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi><mo>≤</mo><mi>N</mi></mrow><annotation encoding="application/x-tex">n\leq{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span></span></span></span></span>）组成的词组（N-gram）作为一个单独的特征放到向量表示中，构成N-gram模型。</p><p>另外，同一词可能有多种词性变化，但含义相似。可以做词干抽取（Word Stemming）处理，将不同词性的单词统一成同一词干的形式。</p><h3 id="主题模型"><a class="markdownIt-Anchor" href="#主题模型"></a> 主题模型</h3><p>基于词袋模型或N-gram模型的文本表示模型有一个明显的缺陷，就是无法识别出两个不同的词或词组是否具有相同的主题。</p><p>因此，需要一种技术能够将具有相同主题的词或词组映射到同一维度上去，于是产生了主题模型。</p><p>主题模型是一种特殊的概率图模型，如何判定不同的词具有相同的主题呢？</p><p>一种想法是，这两个词可能以更高的概率同时出现在同一篇文档中。</p><p>假设有K个主题，我们把任意文章表示成一个K维的主题向量，其中每一维度代表一个主题，权重代表这篇文章属于这个特定主题的概率。</p><p><strong>主题模型所解决的事情</strong>：从文本库中发现有代表性的主题（得到每个主题上面词的分布），并且计算出每篇文章对应着哪些主题。</p><p><strong>1. 概率潜在语义分析 PLSA（Probabilistic Latent Semantic Analysis）</strong><br /><strong>2. 隐狄利克雷分配 LDA（Latent Dirichlet Allocation）</strong></p><h3 id="词嵌入与深度学习模型"><a class="markdownIt-Anchor" href="#词嵌入与深度学习模型"></a> 词嵌入与深度学习模型</h3><p>词嵌入是一类将词向量化的模型的统称，核心思想是将每个词都映射成低维空间（通常K=50~300维）上的一个稠密向量（Dense Vector）。K维空间的每一维也可以看作一个隐含的主题。</p><p>词嵌入每个词映射成一个K维向量，那么一篇有N个词的文章，就可以用N×K维的矩阵来表示。</p><p>这样的表示过于底层，在实际应用中，通常需要进行一定程度的加工，提取出更高层次的特征。在传统浅层机器学习模型中，模型的表现非常依赖于人工提取的特征。</p><p>而深度学习模型正好提供了一种自动进行特征工程的方式，每个隐藏层都可以视为不同抽象层次的特征。</p><p>CNN和RNN在文本表示中取得的效果非常不错，与全连接网络相比，它们一方面很好的抓住了文本的特性，另一方面又减少了网络中待学习的参数，提高了训练速度，降低了过拟合的风险。</p><h3 id="word2vec"><a class="markdownIt-Anchor" href="#word2vec"></a> Word2Vec</h3><p>谷歌2013年提出的Word2Vec是目前最常用的词嵌入模型之一。它是一种浅层神经网络模型，有两种网络结构，分别是CBOW（Continues Bag of Words）和Skip-gram。</p><p>CBOW的目标是根据上下文的词语来预测当前词的生成概率，如图（a）所示；而Skip-gram是根据当前词来预测上下文中各词的生成概率，如图（b）所示。</p><img src="/img/loading.gif" style="zoom: 80%;" / class="lazyload" data-src="https://cdn.jsdelivr.net/gh/cykerr/CDN/blog/img/article/20200413230237.png"><center>图： Word2Vec的两种网络结构</center><br/><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>是当前所专注的词，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(t-2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(t-1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(t+1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mn>2</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(t+2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span></span>是上下文中出现的词，这里前后滑动窗口大小均设为2。</p><p>在CBOW中，输入层中每个词用独热编码表示，即每个词表示成一个N维向量，其中N为词汇表中单词的总数。</p><p>隐藏层中，K个隐含单元的取值由N维输入向量以及连接输入和隐含单元之间的N×K维权重矩阵计算得到。</p><p>输出层也是一个N维向量，由K维隐含向量以及连接隐藏层和输出层之间的K×N维权重矩阵计算得到。最后对输出层向量应用Softmax激活函数，可以算出每个单词的生成概率，取概率最大的那个词作为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>w</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">t</span><span class="mclose">)</span></span></span></span>。Softmax公式定义如下：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>y</mi><mo>=</mo><msub><mi>w</mi><mi>n</mi></msub><mi mathvariant="normal">∣</mi><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><msup><mi>e</mi><msub><mi>x</mi><mi>n</mi></msub></msup><mstyle scriptlevel="0" displaystyle="true"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>N</mi></munderover><msup><mi>e</mi><msub><mi>x</mi><mi>k</mi></msub></msup></mstyle></mfrac></mrow><annotation encoding="application/x-tex">P(y=w_n|x)=\frac{e^{x_n}}{\displaystyle\sum_{i=1}^N e^{x_k}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.337397em;vertical-align:-2.9960050000000003em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.341392em;"><span style="top:-2.11em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8283360000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15122857142857138em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-4.058336000000001em;"><span class="pstrut" style="height:3.828336em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-4.505336em;"><span class="pstrut" style="height:3.828336em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.9960050000000003em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span></span></span></span>代表N维原始输出向量，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">x_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为在原始输出向量中，与单词<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>w</mi><mi>n</mi></msub></mrow><annotation encoding="application/x-tex">w_n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>所对应维度的取值。</p><p>接下来的任务就是训练神经网络的权重，使得语料库中所有单词的整体生成概率最大化。由于Softmax中存在归一化项，每次都需要对所有单词进行遍历，迭代过程非常缓慢，于是产生了Hierarchical Softmax和Negative Sampling两种改进方法。</p><h2 id="数据增强"><a class="markdownIt-Anchor" href="#数据增强"></a> 数据增强</h2><p>大部分模型性能的提升依赖于大量的数据，当数据不足时，通常表现在模型过拟合方面，即在训练集上的效果可能不错，但在测试集上泛化效果较差。</p><p>处理方法可以分为两类：</p><ol><li>基于模型的方法，简化模型（非线性简化为线性）、添加约束项以缩小假设空间（L1/L2正则项）、集成学习、Dropout超参数等。</li><li>基于数据的方法，数据增强（即保持特定信息的前提下，对原始数据进行适当变化来扩充数据集）<ul><li>一定程度内的随机旋转、平移、缩放、裁剪、填充、左右翻转等，表示同一个目标在不同角度的观察结果。</li><li>添加噪声扰动，如椒盐噪声、高斯白噪声。</li><li>颜色变换，在图像RGB颜色空间上利用PCA提取3个主成分的特征向量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">p_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">p_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>p</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">p_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>及对应的特征值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>λ</mi><mn>3</mn></msub></mrow><annotation encoding="application/x-tex">\lambda_3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.84444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，然后对每个像素的RGB值上添加增量<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><msub><mi>p</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>p</mi><mn>3</mn></msub><mo stretchy="false">]</mo><mo>⋅</mo><mo stretchy="false">[</mo><msub><mi>α</mi><mn>1</mn></msub><msub><mi>λ</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>2</mn></msub><msub><mi>λ</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>α</mi><mn>3</mn></msub><msub><mi>λ</mi><mn>3</mn></msub><msup><mo stretchy="false">]</mo><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">[p_1,p_2,p_3]\cdot [\alpha_1\lambda_1,\alpha_2\lambda_2,\alpha_3\lambda_3]^T</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0913309999999998em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathdefault">λ</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">]</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8413309999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span>，其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>α</mi><mi>i</mi></msub></mrow><annotation encoding="application/x-tex">\alpha_i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.0037em;">α</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.0037em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>是均值为0、方差较小的高斯分布随机数。</li><li>改变图像亮度、清晰度、对比度、锐度等。</li></ul></li></ol><p>对于图像数据增强，除了在图像空间进行变换，还可以先对图像进行特征提取，然后在图像的特征空间内进行变换，如SMOTE（Synthetic Minority Over-sampling Technique）算法。</p><p>另外，也可以使用生成模型来合成新样本，如对抗生成网络GAN。</p><p>还可以借助一个在大规模数据集上预训练好的通用模型，并在针对目标任务的小数据集上进行模型微调（fine-tuning），这可看作一种简单的迁移学习。</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 特征工程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
